#!/usr/bin/env bash
[ -f ~/.bash_profile ] && source ~/.bash_profile

set -eo pipefail

export BUILD_SCRIPTS_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
export GIT_ROOT=$(cd $BUILD_SCRIPTS_DIR && git rev-parse --show-toplevel)
export PROJECT_NAME=$(git remote -v \
                             | awk '/origin/ {print $2}' \
                             | head -n1 \
                             | xargs -I{} basename {} .git)

{ [ -f $GIT_ROOT/ci-env.sh ] && source $GIT_ROOT/ci-env.sh; } || \
    source $GIT_ROOT/ci-env.sh.example

{ [ -f $GIT_ROOT/ci-jobs.sh ] && source $GIT_ROOT/ci-jobs.sh; } || \
    source $GIT_ROOT/ci-jobs.sh.example

source $BUILD_SCRIPTS_DIR/helpers

try_report_failure() {
    if [ ! -z "$failure_step" ]; then
        echo
        red_echo "###############"
        red_echo "BUILD FAILED AT $failure_step"
        red_echo "###############"
        echo
    fi
}

build() {
    cd $GIT_ROOT
    job=$1

    # shows the user the name of the steps that the desired job will run
    steps=${job}[@]
    red_echo "### $job will execute the following steps:"
    for step in "${!steps}"; do red_echo "- $step"; done

    # exporting is needed so that scripts can rely on this
    export failure_step=""
    for step in "${!steps}"
    do
        [ -f $BUILD_SCRIPTS_DIR/"${step}_pre" ] &&
            { execute "${step}_pre" || failure_step="${step}_pre" ;}
        [ ! -z "$failure_step" ] && break

        execute "$step" || failure_step="${step}"
        [ ! -z "$failure_step" ] && break

        [ -f $BUILD_SCRIPTS_DIR/"${step}_post" ] &&
            { execute "${step}_post" || failure_step="${step}_post" ;}
        [ ! -z "$failure_step" ] && break
    done

    # checks wether an associated ensure job exists
    ensure_job=""
    eval [ ! -z \$${job}_ensure ] && ensure_job=${job}_ensure

    if [ ! -z $ensure_job ]; then
        # if the ensure job exists, dereference it and run its steps
        steps=${ensure_job}[@]
        echo; red_echo "### ${job}_ensure will execute the following steps:"
        for step in "${!steps}"; do red_echo "- $step"; done

        for step in "${!steps}"
        do
            (execute $step) || true # if a step fail, ignore it.
        done
    fi

    try_report_failure
    [ -z "$failure_step" ]
}

build $1
